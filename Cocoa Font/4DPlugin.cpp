/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : Cocoa Font
 #	author : miyako
 #	12/04/26
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
			// --- Font List
			
		case 1 :
			FONT_GET_FAMILY_NAMES(pResult, pParams);
			break;
			
		case 2 :
			FONT_GET_NAMES(pResult, pParams);
			break;
			
		case 3 :
			FONT_GET_FAMILY_MEMBER_NAMES(pResult, pParams);
			break;
			
		case 4 :
			FONT_GET_DISPLAY_NAMES(pResult, pParams);
			break;
			
			// --- Font Traits
			
		case 5 :
			FONT_GET_INFORMATION(pResult, pParams);
			break;
			
		case 6 :
			FONT_Get_traits(pResult, pParams);
			break;
			
		case 7 :
			FONT_Get_weight(pResult, pParams);
			break;
			
			// --- Localization
			
		case 8 :
			FONT_Get_display_name(pResult, pParams);
			break;
			
		case 9 :
			FONT_Get_localized_name(pResult, pParams);
			break;
			
	}
}

// ----------------------------------- Font List ----------------------------------


void FONT_GET_FAMILY_NAMES(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_TEXT Param1;
	
	Param1.setSize(1);
	
	NSFontManager *sharedFontManager = [NSFontManager sharedFontManager];
	NSArray *names = [sharedFontManager availableFontFamilies];
	
	for (unsigned int i = 0; i < [names count]; ++i) {
		
		Param1.appendUTF16String((NSString *)[names objectAtIndex:i]);
		
	}
	
	Param1.toParamAtIndex(pParams, 1);	
}

void FONT_GET_DISPLAY_NAMES(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_TEXT Param1;
	
	Param1.setSize(1);
	
	C_LONGINT Param2;
	
	Param2.fromParamAtIndex(pParams, 2);
	
	NSFontManager *sharedFontManager = [NSFontManager sharedFontManager];
	NSArray *names;
	
	switch (Param2.getIntValue()) {
		case 0:
			names = [sharedFontManager availableFonts];
			break;
		default:
			names = [sharedFontManager availableFontNamesWithTraits:(NSFontTraitMask)Param2.getIntValue()];			
			break;
	}
	
	for (unsigned int i = 0; i < [names count]; ++i) {
		
		NSFont *font = [NSFont fontWithName:(NSString *)[names objectAtIndex:i] size:0.0];	
		if(font) Param1.appendUTF16String([font displayName]);
	
	}	
	
	Param1.toParamAtIndex(pParams, 1);	
}

void FONT_GET_NAMES(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_TEXT Param1;
	
	Param1.setSize(1);
	
	C_LONGINT Param2;
	
	Param2.fromParamAtIndex(pParams, 2);
	
	NSFontManager *sharedFontManager = [NSFontManager sharedFontManager];
	NSArray *names;
	
	switch (Param2.getIntValue()) {
		case 0:
			names = [sharedFontManager availableFonts];
			break;
		default:
			names = [sharedFontManager availableFontNamesWithTraits:(NSFontTraitMask)Param2.getIntValue()];			
			break;
	}
	
	for (unsigned int i = 0; i < [names count]; ++i) {
		
	//	if(![[names objectAtIndex:i]isEqualToString:@".Keyboard"])
			Param1.appendUTF16String((NSString *)[names objectAtIndex:i]);
		
	}	
	
	Param1.toParamAtIndex(pParams, 1);
}

void FONT_GET_FAMILY_MEMBER_NAMES(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	ARRAY_TEXT Param3;
	ARRAY_LONGINT Param4;
	ARRAY_LONGINT Param5;
	
	Param2.setSize(1);
	Param3.setSize(1);
	Param4.setSize(1);
	Param5.setSize(1);
	
	Param1.fromParamAtIndex(pParams, 1);
	
	NSFontManager *sharedFontManager = [NSFontManager sharedFontManager];
	
	NSString *family = Param1.copyUTF16String();
	
	NSArray *fonts = [sharedFontManager availableMembersOfFontFamily:family];
	
	for (unsigned int i = 0; i < [fonts count]; ++i) {
		
		Param2.appendUTF16String((NSString *)[[fonts objectAtIndex:i]objectAtIndex:0]);
		Param3.appendUTF16String((NSString *)[[fonts objectAtIndex:i]objectAtIndex:1]);
		
		Param4.appendIntValue((int)[[[fonts objectAtIndex:i]objectAtIndex:2] intValue]);
		Param5.appendIntValue((int)[[[fonts objectAtIndex:i]objectAtIndex:3] intValue]);		
		
	}	
	
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	Param4.toParamAtIndex(pParams, 4);
	Param5.toParamAtIndex(pParams, 5);
}

// ---------------------------------- Font Traits ---------------------------------


void FONT_GET_INFORMATION(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	ARRAY_TEXT Param3;
	ARRAY_TEXT Param4;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	NSString *name = Param1.copyUTF16String();
	
	NSFont *font = [NSFont fontWithName:name size:Param2.getIntValue()];

	if(font){
		Param3.appendUTF16String(@"");
		Param4.appendUTF16String(@"");	
		Param3.appendUTF16String([NSString stringWithFormat:@"%@", [font ascender]]);
		Param4.appendUTF16String(@"ascender");	
		Param3.appendUTF16String([NSString stringWithFormat:@"%@", [font descender]]);
		Param4.appendUTF16String(@"descender");	
		Param3.appendUTF16String([NSString stringWithFormat:@"%@", [font capHeight]]);
		Param4.appendUTF16String(@"capHeight");			
		Param3.appendUTF16String([NSString stringWithFormat:@"%@", [font leading]]);
		Param4.appendUTF16String(@"leading");	
		Param3.appendUTF16String([NSString stringWithFormat:@"%@", [font italicAngle]]);
		Param4.appendUTF16String(@"italicAngle");
		Param3.appendUTF16String([NSString stringWithFormat:@"%@", [font isFixedPitch]]);
		Param4.appendUTF16String(@"isFixedPitch");		
		Param3.appendUTF16String([NSString stringWithFormat:@"%@", [font underlinePosition]]);
		Param4.appendUTF16String(@"underlinePosition");			
		Param3.appendUTF16String([NSString stringWithFormat:@"%@", [font underlineThickness]]);
		Param4.appendUTF16String(@"underlineThickness");		
		Param3.appendUTF16String([NSString stringWithFormat:@"%@", [font xHeight]]);
		Param4.appendUTF16String(@"xHeight");		
	}				
					
	Param3.toParamAtIndex(pParams, 3);
	Param4.toParamAtIndex(pParams, 4);
					
	[name release];					
}

void FONT_Get_traits(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSString *name = Param1.copyUTF16String();
	
	NSFontManager *sharedFontManager = [NSFontManager sharedFontManager];
	
	NSFont *font = [NSFont fontWithName:name size:0.0];

	if(font) returnValue.setIntValue([sharedFontManager traitsOfFont:font]);
	
	returnValue.setReturn(pResult);
	
	[name release];		
}

void FONT_Get_weight(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSString *name = Param1.copyUTF16String();
	
	NSFontManager *sharedFontManager = [NSFontManager sharedFontManager];

	NSFont *font = [NSFont fontWithName:name size:0.0];
	
	if(font) returnValue.setIntValue([sharedFontManager weightOfFont:font]);

	returnValue.setReturn(pResult);
	
	[name release];	
}

// --------------------------------- Localization ---------------------------------


void FONT_Get_display_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSString *name = Param1.copyUTF16String();
	
	NSFont *font = [NSFont fontWithName:name size:0.0];
	
	if(font) returnValue.setUTF16String([font displayName]);

	returnValue.setReturn(pResult);
	
	[name release];
}

void FONT_Get_localized_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	NSString *family = Param1.copyUTF16String();
	NSString *face = Param2.copyUTF16String();	
	
	NSFontManager *sharedFontManager = [NSFontManager sharedFontManager];
	
	NSString *name = [sharedFontManager localizedNameForFamily:family face:face];
	
	if(name) returnValue.setUTF16String(name);

	returnValue.setReturn(pResult);
	
	[family release];
	[face release];	
}

